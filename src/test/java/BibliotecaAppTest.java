/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class BibliotecaAppTest {

    private BibliotecaApp bibliotecaApp;
    private ConsoleOutput output;

    @Before
    public void testSet() {
        output = mock(ConsoleOutput.class);
        bibliotecaApp = new BibliotecaApp(output);
    }

    @Test
    public void testPrintBookList() {
        bibliotecaApp.printBookList();
        String expectPrint = "Test-driven Development\n" +
                "Refactoring: Improving the Design of Existing Code\n" +
                "Head First Java\n" +
                "Core Java Volume I\n";

        verify(output,times(1)).print(expectPrint);
    }

    @Test
    public void shouldPrintBookListWithDetail() {
        bibliotecaApp.printBooksDetail();
        String expectPrint = "Book Name                                                             Author                                                                Year Published                                                        \n" +
                "0. Test-driven Development                                               Kent Beck                                                             2003                                                                  \n" +
                "1. Refactoring: Improving the Design of Existing Code                    Martin Fowler                                                         2012                                                                  \n" +
                "2. Head First Java                                                       Kathy Sierra, Bert Bates                                              2003                                                                  \n" +
                "3. Core Java Volume I                                                    Cay S. Horstmann                                                      2015                                                                  \n";

        verify(output, times(1)).print(expectPrint);
    }

    @Test
    public void shouldPrintMainMenu() {
        bibliotecaApp.printMainMenu();

        verify(output, times(1)).print("Main Manu:\n * 1. List Books\n * 0. exit");
    }

    @Test
    public void shouldShowInvalidMessage() {
        String expectPrint = "Select a valid option!";
        bibliotecaApp.printWrongInstructionMessage();

        verify(output, times(1)).print(expectPrint);
    }

    @Test
    public void testPrintQuitMessage() {
        String expectPrint = "Goodbye!";
        bibliotecaApp.printQuitMessage();

        verify(output, times(1)).print(expectPrint);
    }

    @Test
    public void shouldPrintWelcomeMessage() throws Exception {
        bibliotecaApp.printWelcomeMessage();

        verify(output, times(1)).print("Welcome to Biblioteca\n------------------------------------------");
    }

    @Test
    public void shouldCanCheckoutBook() throws Exception {
        Book checkoutBook = bibliotecaApp.getBookLists().get(1);
        bibliotecaApp.checkoutBook(1);

        assertEquals(3,bibliotecaApp.getBookLists().size());
        assertTrue(!bibliotecaApp.getBookLists().get(1).getBookName().equals(checkoutBook.getBookName()));
    }

    @Test
    public void shouldCheckoutBookSuccessfully() throws Exception {
        bibliotecaApp.checkoutBook(0);

        assertEquals(3,bibliotecaApp.getBookLists().size());
        verify(output, times(1)).print("Thank you! Enjoy the book");
    }

    @Test
    public void shouldCheckoutBookUnsuccessfully() throws Exception {
        bibliotecaApp.checkoutBook(10);

        verify(output, times(1)).print("That book is not available.");
    }

    @Test
    public void shouldCanReturnBook() throws Exception {
        Book returnBook = new Book("testBook", "testAuthor","testYear");
        bibliotecaApp.returnBook(returnBook);

        assertEquals(5, bibliotecaApp.getBookLists().size());
        assertTrue(bibliotecaApp.getBookLists().contains(returnBook));
    }

    @Test
    public void shouldReturnBookSuccessfully() throws  Exception {
        Book returnBook = new Book("testBook", "testAuthor","testYear");
        bibliotecaApp.returnBook(returnBook);

        assertTrue(bibliotecaApp.getBookLists().contains(returnBook));
        verify(output, times(1)).print("Thank you for returning the book.");
    }
}
